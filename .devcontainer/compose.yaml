#DEV CONTAINER
services:
  java:
    annotations:
    - topology=application
    - type=ide
    build:
      context: ./java
      dockerfile: Containerfile
    restart: "no"
    image: "spring-java:17"
    container_name: spring
    user: "developer"
    ports:
    - "8080:8080" # serve undertow
    - "8081:8081" # serve actuator
    volumes:
    - "../:/workspace:cached"
    command: /bin/sh -c "while sleep 1000; do :; done"
    depends_on:
    - database
    networks:
    - development

  database:
    annotations:
    - topology=infrastructure
    - type=persistence
    image: postgres:16
    restart: "no"
    container_name: postgres
    environment:
    - POSTGRES_USER=admin
    - POSTGRES_PASSWORD=adminpwd
    - POSTGRES_DB=spring
    ports:
    - "5432:5432" # serve database
    networks:
    - development

  jaeger:
    annotations:
    - topology=infrastructure
    - type=monitoring
    image: jaegertracing/all-in-one:1.58
    restart: "no"
    container_name: jaeger
    environment:
    - COLLECTOR_OTLP_ENABLED=true
    ports:
    - "6831" # accept jaeger.thrift over Thrift-compact protocol (used by most SDKs)
    - "6832" # accept jaeger.thrift over Thrift-binary protocol (used by Node.js SDK)
    - "5778" # serve configs (sampling, etc.)
    - "16686:16686" # serve frontend
    - "4317" # accept OpenTelemetry Protocol (OTLP) over gRPC
    - "4318" # accept OpenTelemetry Protocol (OTLP) over HTTP
    - "14268" # accept jaeger.thrift directly from clients
    - "14250" # accept model.proto
    - "9411" # Zipkin compatible endpoint (optional)
    networks:
    - development

  loki:
    annotations:
    - topology=infrastructure
    - type=monitoring
    image: grafana/loki:main
    container_name: loki
    restart: "no"
    command: 
    - -config.file=/etc/loki/local-config.yaml
    #volumes:
    #- ./container/loki/local-config.yaml:/etc/loki/local-config.yaml
    ports:
    - "3100" # serve http agent
    - "9096" # serve grpc agent
    networks:
    - development

  prometheus:
    annotations:
    - topology=infrastructure
    - type=monitoring
    image: prom/prometheus:main
    container_name: prometheus
    restart: "no"
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    volumes:
    - ../container/prometheus/prometheus-config.yml:/etc/prometheus/prometheus.yml
    ports:
    - "9090:9090" # serve frontend
    networks:
    - development

  grafana:
    annotations:
    - topology=infrastructure
    - type=monitoring
    image: grafana/grafana:main
    container_name: grafana
    restart: "no"
    volumes:
    - ../container/grafana/grafana.ini:/etc/grafana/grafana.ini
    - ../container/grafana/provisioning/:/etc/grafana/provisioning/
    ports:
    - "3000:3000" # serve frontend
    networks:
    - development
    depends_on:
    - prometheus
    - loki
    
  otelcol:
    annotations:
    - topology=infrastructure
    - type=monitoring
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-col
    restart: "no"
    command:
    - --config=/etc/otelcol-config.yml
    volumes:
    - ../container/otel/otelcol-config.yml:/etc/otelcol-config.yml
    ports:
    - "1888" # pprof extension
    - "8888" # Prometheus metrics exposed by the Collector
    - "8889" # Prometheus exporter metrics
    - "13133" # health_check extension
    - "4317" # OTLP gRPC receiver
    - "4318" # OTLP http receiver
    - "55679" # zpages extension
    depends_on:
    - jaeger
    networks:
    - development

networks:
  development:
    driver: bridge